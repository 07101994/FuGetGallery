@page
@{    
    var package = await PackageData.GetAsync (RouteData.Values["id"], RouteData.Values["version"]);
    var authors = package.AuthorsOrOwners;

    var inputTargetFramework = (RouteData.Values["targetFramework"] ?? "").ToString().Trim();
    var framework = package.FindClosestTargetFramework (inputTargetFramework);

    var inputAssemblyName = (RouteData.Values["assemblyName"] ?? "").ToString().Trim();
    var asm = framework?.GetAssembly (RouteData.Values["dir"], inputAssemblyName);
    var isBuildAsm = "build".Equals(RouteData.Values["dir"]);
    var dir = isBuildAsm ? "build" : "lib";
    var asmDef = asm?.Definition;

    var types = asmDef != null ? (IEnumerable<Mono.Cecil.TypeDefinition>)asmDef.MainModule.Types : new Mono.Cecil.TypeDefinition[0];

    var namespaces = types.GroupBy(x => x.Namespace).OrderBy(x => x.Key).Where(x => !string.IsNullOrEmpty(x.Key)).ToList();

    var inputNamespace = (RouteData.Values["namespace"] ?? "").ToString().Trim();

    var ns = namespaces.FirstOrDefault (x => x.Key == inputNamespace);
    if (ns == null) {
        var publicNamespaces = namespaces.Where(n => n.Any(x => x.IsPublic)).OrderByDescending(n => n.Count(x => x.IsPublic));
        ns = publicNamespaces.FirstOrDefault ();
        if (ns == null) {
            ns = namespaces.FirstOrDefault ();
        }
    }

    var inputTypeName = (RouteData.Values["typeName"] ?? "").ToString().Trim();

    var typ = ns?.FirstOrDefault(x => x.Name == inputTypeName);
    var docs = typ != null ? framework?.GetTypeDocumentation(typ) : null;

    var q = Request.Query["q"].FirstOrDefault() ?? "";
    var eq = q.Length > 0 ? "?q=" + Uri.EscapeDataString (q) : "";

    var size = framework != null ? framework.SizeInBytes : 0;

    var nupkgName = package.Id + "." + package.Version + ".nupkg";

    var title = typ != null ? typ.FullName : package.Id + " " + package.Version;
    var description = package.Description;

    if (typ != null) {    
        title = typ.FullName;
        description = $"Type with {typ.Properties.Count} properties and {typ.Methods.Count} methods";
        if (docs != null && !string.IsNullOrEmpty (docs.SummaryText)) {
            description += "\n\n" + docs.SummaryText;
        }
    }
    else if (ns != null && inputNamespace.Length > 0) {
        title = ns.Key;
        description = $"Namespace with {ns.Count():#,0} types";
    }
    else if (asmDef != null && inputAssemblyName.Length > 0) {
        title = asm.FileName ?? asmDef.Name.Name;
        description = $"Assembly with {types.Count():#,0} types ({asm.SizeInBytes:#,0} bytes)";
    }

    string GetIcon(object o) {
        if (o == null) return "";
        if (o is PackageAssembly) return "file";
        if (o is Mono.Cecil.TypeDefinition t) {
            var isPublic = t.IsPublic;
            var isEnum = t.IsEnum;
            var isStruct = !isEnum && t.IsValueType;
            var isDel = !(isEnum || isStruct) && t.IsDelegate();
            var isIface = !(isEnum || isStruct || isDel) && (t.IsInterface || t.IsAbstract);
            return isEnum ? "menu-hamburger" : (isDel ? "flash" : (isStruct ? "unchecked" : (isIface ? "star-empty" : "star")));
        }
        if (o is System.Linq.IGrouping<string, Mono.Cecil.TypeDefinition> g) {
            return "book";
        }
        if (o is PackageDependency d) {
            return "briefcase";
        }
        if (o is PackageData p) {
            return "briefcase";
        }
        return "";
    }

    ViewData["Title"] = title;
    ViewData["q"] = q;

    ViewData["meta"] = new Dictionary<string, string> {
        { "twitter:card", "summary" },
        { "og:url", Request.GetEncodedUrl () },
        { "og:title", title },
        { "og:description", description },
        { "og:image", package.IconUrl },
    };
}

<h1>@if (!string.IsNullOrEmpty(package.IconUrl)) {
        <img src="@package.IconUrl" width="64" height="64" style="margin-top:5px;margin-left:-84px;float:left" />
    }
    @package.Id
    <small>@package.Version
    @if (!string.IsNullOrEmpty(authors)) {
        <small style="">by @authors</small>
    }
    </small>
</h1>

@if (!string.IsNullOrEmpty(package.Description)) {
    <p style="overflow:scroll;white-space:pre-wrap;word-wrap:normal;max-height:10em;font-size:120%;color:#777;margin-top:-0.25em;margin-bottom:1.25em;border:none;background-color:inherit;font-family:inherit;padding:0;">@package.Description</p>
}

<p>
<a href="@package.DownloadUrl" type="button" class="btn btn-default">
  <span class="glyphicon glyphicon-download" aria-hidden="true"></span> @nupkgName
</a>
@if (!string.IsNullOrEmpty(package.ProjectUrl)) {
    <a href="@package.ProjectUrl" type="button" class="btn btn-default">
        <span class="glyphicon glyphicon-link" aria-hidden="true"></span> Project Site
    </a>
}
<a href="https://www.nuget.org/packages/@package.Id/@package.Version" type="button" class="btn btn-default">
    <span class="glyphicon glyphicon-link" aria-hidden="true"></span> NuGet Gallery
</a>
</p>

<pre style="border:none"><code class="xml" style="background-color:transparent">&lt;PackageReference Include="@package.Id" Version="@package.Version" /&gt;</code></pre>

@if (package.Error != null) {
    <div class="">
        <h2>Error reading package</h2>
        <pre>@package.Error</pre>
    </div>
}

@if (package.TargetFrameworks.Count > 0) {
    <h2 style="margin-top:1.25em;">Frameworks</h2>

    <nav style="margin-top:0em;line-height:2.75em;">
    @foreach (var tf in package.TargetFrameworks) {
        var active = tf.Moniker == framework.Moniker ? "active" : "";
        var color = tf.Moniker.StartsWith("netstandard") ? "success" : 
                    (tf.Moniker.StartsWith("net") ? "info" :
                    (tf.Moniker.StartsWith("portable") ? "warning" : "primary"));
        var bold = active == "active" ? "bold" : "normal";
        var tcolor = active == "active" ? "color:#fff" : "";
        <a class="btn btn-@color btn-med @active" style="font-weight:@bold;@tcolor" role="button" href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/@dir/@Uri.EscapeDataString(@tf.Moniker)@eq">@tf.Moniker</a>
    }
    </nav>
}

@if (framework != null && framework.Dependencies.Count > 0) {
    <h3>Dependencies</h3>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var d in framework.Dependencies.OrderBy(x => x.PackageId)) {
        <li>
            <span class="glyphicon glyphicon-@GetIcon(d)" aria-hidden="true"></span>&nbsp;<a style="color:#000"
                href="/packages/@Uri.EscapeDataString(d.PackageId)/@Uri.EscapeDataString(d.VersionSpec)@eq">@d.PackageId</a>
        </li>
    }
    </ul>
}

@if (framework != null && (framework.Assemblies.Count + framework.BuildAssemblies.Count > 0)) {
    <p id="api">&nbsp;</p>
    <h2 style="margin-top:0em;padding-top:1em;border-top:#ddd solid 1px;margin-bottom:0em">API <small>@size.ToString("#,0") bytes</small></h2>

    <div class="row">
    <div class="col-xs-12 col-sm-3">
    @if (framework.Assemblies.Count > 0) {
        <h3 style="color:#444;">Assemblies</h3>
        <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
        @foreach (var a in framework.Assemblies.OrderBy(x => x.FileName)) {
            var bold = !isBuildAsm && a.FileName == asm?.FileName ? "bold" : "normal";
            var color = bold == "bold" ? "#000" : "#777";
            <li>
                <a style="font-weight:@bold;color:@color;"
                   href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/lib/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(a.FileName)@eq#api">
                    <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.FileName</a>
            </li>
        }
        </ul>
    }
    @if (framework.BuildAssemblies.Count > 0) {
        <h3 style="color:#444;">Build Assemblies</h3>
        <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
        @foreach (var a in framework.BuildAssemblies.OrderBy(x => x.FileName)) {
            var bold = isBuildAsm && a.FileName == asm?.FileName ? "bold" : "normal";
            var color = bold == "bold" ? "#000" : "#777";
            <li>
                <a style="font-weight:@bold;color:@color;"
                   href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/build/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(a.FileName)@eq#api">
                   <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.FileName</a>
            </li>
        }
        </ul>
    }
    @if (asmDef != null && namespaces != null && namespaces.Count > 0) {
        <h3 style="color:#444;">Namespaces</h3>
        <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
        @foreach (var n in namespaces) {
            var bold = n.Key == ns?.Key ? "bold" : "normal";
            var isPublic = n.Any(x => x.IsPublic);
            var color = bold == "bold" ? "#000" : (isPublic ? "#777" : "#CCC");
            <li>
                <a style="font-weight:@bold;color:@color;"
                   href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/@dir/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(asm.FileName)/@Uri.EscapeDataString(n.Key)@eq#api">
                    <span class="glyphicon glyphicon-@GetIcon(n)" aria-hidden="true"></span>&nbsp;@n.Key</a>
            </li>
        }
        </ul>
    }
    @if (ns != null) {
        <h3 id="types" style="color:#444;">Types</h3>
        <ul style="list-style-type:none;padding:0;white-space:nowrap">
        @foreach (var t in ns.OrderBy(x => x.Name)) {
            var bold = t.Name == typ?.Name ? "bold" : "normal";            
            var color = bold == "bold" ? "#000" : (t.IsPublic ? "#777" : "#CCC");
            var active = bold == "bold" ? "active" : "";
            <li>
                <a class="@active" style="font-weight:@bold;color:@color;"
                   href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/@dir/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(asm.FileName)/@Uri.EscapeDataString(ns.Key)/@Uri.EscapeDataString(t.Name)@eq#api">
                    <span class="glyphicon glyphicon-@GetIcon(t)" aria-hidden="true"></span>&nbsp;@t.Name</a>
            </li>
        }
        </ul>
    }
    </div>
    <div class="col-xs-12 col-sm-9" id="code">
    @if (typ != null) {    
        <h2 id="type"><span class="glyphicon glyphicon-@GetIcon(typ)" aria-hidden="true"></span>&nbsp;@typ.FullName</h2>
        <p style="white-space:pre-wrap;word-wrap:normal;">@description</p>
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation"><a href="#home" aria-controls="documentation" role="tab" data-toggle="tab">Documentation</a></li>
            <li role="presentation" class="active"><a href="#profile" aria-controls="code" role="tab" data-toggle="tab">Code</a></li>
        </ul>
        <pre style="tab-size:4;line-height:1.3em;border:none;border-radius:0;padding-left:0;"><code class="csharp" style="white-space:pre;word-wrap:normal;background-color:transparent;border:none;">@asm.DecompileType(typ)</code></pre>
    }
    else if (ns != null && inputNamespace.Length > 0) {
        <h2 id="namespace"><span class="glyphicon glyphicon-@GetIcon(ns)" aria-hidden="true"></span>&nbsp;@ns.Key</h2>
        <p>@description</p>
    }
    else if (asmDef != null && inputAssemblyName.Length > 0) {
        <h2 id="assembly"><span class="glyphicon glyphicon-@GetIcon(asm)" aria-hidden="true"></span>&nbsp;@asm.FileName <small>@asmDef.Name.Version</small></h2>
        <p>@description</p>
    }
    else {
        <h2 id="assembly"><span class="glyphicon glyphicon-@GetIcon(package)" aria-hidden="true"></span>&nbsp;@package.Id <small>@package.Version</small></h2>
        <p>@description</p>
    }
    </div>
    </div>
}




